def rail_fence_encrypt(text, num_rails):
    if num_rails <= 1 or num_rails >= len(text):
        return text

    rails = [''] * num_rails
    row, step = 0, 1

    for char in text:
        rails[row] += char
        # Zigzag direction control
        if row == 0:
            step = 1
        elif row == num_rails - 1:
            step = -1
        row += step

    return ''.join(rails)

def rail_fence_decrypt(ciphertext, num_rails):
    if num_rails <= 1 or num_rails >= len(ciphertext):
        return ciphertext

    # Create a zigzag pattern to track positions
    pattern = [0] * len(ciphertext)
    row, step = 0, 1
    for i in range(len(ciphertext)):
        pattern[i] = row
        if row == 0:
            step = 1
        elif row == num_rails - 1:
            step = -1
        row += step

    # Determine the length of each rail
    rail_lengths = [pattern.count(r) for r in range(num_rails)]

    # Divide ciphertext into rails based on calculated lengths
    rails = []
    index = 0
    for length in rail_lengths:
        rails.append(ciphertext[index:index + length])
        index += length

    # Reconstruct plaintext by following the zigzag pattern
    rail_indices = [0] * num_rails
    result = []
    for r in pattern:
        result.append(rails[r][rail_indices[r]])
        rail_indices[r] += 1

    return ''.join(result)

# Example usage
if __name__ == "__main__":
    plaintext = input("Enter the text to encrypt: ")
    num_rails = int(input("Enter the number of rails: "))

    encrypted = rail_fence_encrypt(plaintext, num_rails)
    print(f"Encrypted text: {encrypted}")

    decrypted = rail_fence_decrypt(encrypted, num_rails)
    print(f"Decrypted text: {decrypted}")
    
    """
Rail Fence Cipher Explanation:

The Rail Fence Cipher is a transposition cipher that encrypts plaintext by writing it in a zigzag pattern 
over multiple rails (rows) and then reading the ciphertext by rows. It is a simple yet interesting cipher, 
but it is not secure by modern standards.

### Steps for Encryption:
1. **Writing the Plaintext in Zigzag Pattern**:
   - The plaintext is written in a zigzag pattern over a specified number of rails (rows).
   - Example with 3 rails:
     - Write the text in a zigzag pattern as follows:
       First row: Write from left to right.
       Second row: Write diagonally down.
       Third row: Write from left to right again.
     - Continue this process for the entire plaintext.

     For the plaintext "HELLO WORLD" and 3 rails, the zigzag pattern will look like:
     H . . . O . . . R . .
     . E . L . W . L . D .
     . . L . . . O . . . .

2. **Constructing the Ciphertext**:
   - After filling in the zigzag pattern, we read the rows sequentially (from top to bottom, left to right) to construct the ciphertext:
     - First row: "HOR"
     - Second row: "ELWL D"
     - Third row: "LL"
     - Thus, the ciphertext is: "HOR ELWL DLL"

### Decryption Process:
1. **Reconstructing the Zigzag Pattern**:
   - To decrypt the ciphertext, the first step is to recreate the zigzag pattern.
   - This involves calculating the number of characters in each row and filling them in accordingly.

2. **Reading Column by Column**:
   - Once the zigzag pattern is recreated, read the ciphertext column by column to retrieve the original plaintext.

### Example:
- Given plaintext: "HELLO WORLD" with 3 rails.
- Zigzag pattern:
  H . . . O . . . R . .
  . E . L . W . L . D .
  . . L . . . O . . . .
- Ciphertext: "HOR ELWL DLL"
- Decryption would reconstruct the zigzag pattern and recover "HELLO WORLD".

### Complexity Analysis:
- **Time Complexity**:
  - The time complexity is O(n), where 'n' is the length of the plaintext. Each character is placed into the zigzag pattern once and read once.
  
- **Space Complexity**:
  - The space complexity is O(n), as we need space to store the zigzag pattern, which is the same size as the plaintext.

### Security:
- The Rail Fence Cipher is a relatively simple cipher and not secure by modern standards.
- It can be easily broken with frequency analysis and pattern recognition techniques.
"""
