def caesar_cipher_encrypt(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            shift_base = ord('A') if char.isupper() else ord('a')
            encrypted_text += chr((ord(char) - shift_base + shift) % 26 + shift_base)
        else:
            encrypted_text += char  # Non-alphabetic characters remain unchanged
    return encrypted_text

def caesar_cipher_decrypt(text, shift):
    return caesar_cipher_encrypt(text, -shift)

# Example usage
if __name__ == "__main__":
    plaintext = input("Enter the text to encrypt: ")
    shift = int(input("Enter the shift value: "))
    
    encrypted_text = caesar_cipher_encrypt(plaintext, shift)
    print(f"Encrypted text: {encrypted_text}")
    
    decrypted_text = caesar_cipher_decrypt(encrypted_text, shift)
    print(f"Decrypted text: {decrypted_text}")
    
    """
Explanation:
1. The `encrypt_caesar` function shifts each character in the input text by a given number of positions.
2. The `decrypt_caesar` function reverses the shift to retrieve the original plaintext.
3. Uppercase and lowercase letters are handled separately, while non-alphabetic characters remain unchanged.
4. The program uses modulo 26 to ensure the shift wraps around within the alphabet.

Complexity Analysis:
1. Time Complexity:
   - Encryption/Decryption: O(n), where n is the length of the text.
   - Each character is processed once.
2. Space Complexity:
   - O(n), where n is the length of the text, for storing the output text.

Instructions for Submission:
1. Save the source code to a file named `caesar_cipher.py`.
2. Take screenshots of the program outputs for both encryption and decryption cases.
3. Write a brief explanation of the implementation, including the steps and complexity analysis.
"""